
 db.comments.insert({
    'name': 'Harry',
    'lang': 'JS',
    'member_since': 5,
    'date': new Date()
  })


  db.comments.replaceOne({name:'Harry'},
  {
    'name':'Harry',
    'lang':'JS',
    'member_since':51
  })

    db.comments.replaceOne({name:'Harry22'},
  {
    'name':'Harry',
    'lang':'JS',
    'member_since':51
  })

    db.comments.replaceOne({name:'Shubham'},
  {
    'name':'Harry',
    'lang':'JS',
    'member_since':51
  }, {upsert:true})


  Please enter a MongoDB connection string (Default: mongodb://localhost/):

Current Mongosh Log ID: 6324186ba168be3932c58e9c
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.5.4
Using MongoDB:          6.0.1
Using Mongosh:          1.5.4

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2022-09-15T20:43:21.852+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

------
   Enable MongoDB's free cloud-based monitoring service, which will then receive and display
   metrics about your deployment (disk utilization, CPU, operation statistics, etc).

   The monitoring data will be available on a MongoDB website with a unique URL accessible to you
   and anyone you share the URL with. MongoDB may use this information to make product
   improvements and to suggest MongoDB products and deployment options to you.

   To enable free monitoring, run the following command: db.enableFreeMonitoring()
   To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
------
//VIEW ALL DATABASE
test> show dbs
CWHblog  48.00 KiB
admin    40.00 KiB
config   84.00 KiB
local    72.00 KiB

//CHECK IN WHICH DATABASE YOU ARE IN NOW
test> db
test

//CREATE NEW DATABASE
test> use comments
switched to db comments

//DISPLAY DATABASES
comments> show dbs
CWHBlog   40.00 KiB
admin     40.00 KiB
config   108.00 KiB
local     72.00 KiB
// Anyone wondering why after "use  <database name>" , 
// database is not showing on "show dbs" command .This is 
// because database is empty ,so you have to create collection 
// in database first and then that new database will show.

//CHECK IN WHICH DATABASE YOU ARE IN NOW
comments> db
comments

//DROP DATABASE OF PRESENT ONE YOU ARE IN
comments> db.dropDatabase()
{ ok: 1, dropped: 'comments' }

//COLLECTION RELATED COMMANDS
// SHOW DATABASE, BUT YOU DELETED THE COMMENTS DATABASE
comments> db
comments

//SHOW DATABASES, COMMENTS IS NOT THERE
comments> show dbs
CWHBlog   40.00 KiB
admin     40.00 KiB
config   108.00 KiB
local     72.00 KiB

//YOU HAVE CWHBlog, GET INSIDE BY THIS COMMAND
comments> use CWHBlog
switched to db CWHBlog

//CHECK WHICH DATABASE YOU ARE IN NOW
CWHBlog> db
CWHBlog

//SHOW COLLECTIONS OF THE DATABASE
CWHBlog> show collections
content

// IF YOU WANT TO CREATE ANOTHER COLLECTION IN CWHBlog, USE THIS COMMAND
CWHBlog> db.createCollection('comments')
{ ok: 1 }

//NOW CHECK COLLECTIONS YOU WILL HAVE COMMENTS
CWHBlog> show collections
comments
content

//DELETE THE COLLECTION, COMMAND FOR, db.nameofthecollection.drop()
CWHBlog> db.content.drop()
true

//NOW CHECK THE COLLECTIONS
CWHBlog> show collections
comments

//CREATE NEW COLLECTION OF MYCOMMENTS
CWHBlog> db.createCollection('myComments')
{ ok: 1 }

//NOW CHECK THE COLLECTIONS
CWHBlog> show collections
comments
myComments

//DELETE THE COLLECTION, COMMAND FOR, db.nameofthecollection.drop()
CWHBlog> db.myComments.drop()
true

//NOW CHECK THE COLLECTIONS
CWHBlog> show collections
comments

//INSERT ONE ROW IN COMMENTS COLLECTIONS
CWHBlog> db.comments.insert({ 'name':'Harry', 'lang':'JS', 'member_since': 5})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("63241e5ae63b76ae19f4d534") }
}

//INSERT MANY ROWS IN COMMENTS COLLECTIONS
CWHBlog> db.comments.insertMany([{ 'name':'Harry', 'lang':'JS', 'member_since': 5},{ 'name':'Rohan', 'lang':'Python', 'member_since': 3},{ 'name':'Lovish', 'lang':'Java', 'member_since': 4}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("63242275e63b76ae19f4d535"),
    '1': ObjectId("63242275e63b76ae19f4d536"),
    '2': ObjectId("63242275e63b76ae19f4d537")
  }
}

//FIND THE DATA INSERTED IN COMMENTS COLLECTION
CWHBlog> db.comments.find()
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  }
]

//DISPLAY THE DATA INSERTED IN COMMENTS COLLECTION IN PRETTY FORM
CWHBlog> db.comments.find().pretty()
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  }
]

//INSERT A NEW DATA IN EXISTED DATA, ADD DATE, FOR THAT WE CHOOSED
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
// FROM THE ABOVE DATA, NO NEED TO INSERT OBJECT_ID
CWHBlog>  db.comments.insert({
...     'name': 'Harry',
...     'lang': 'JS',
...     'member_since': 5,
...     'date': new Date()
...   })
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("63242593e63b76ae19f4d538") }
}

//FIND THE DATA INSERTED IN COMMENTS COLLECTION
CWHBlog> db.comments.find()
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  },
  {
    _id: ObjectId("63242593e63b76ae19f4d538"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5,
    date: ISODate("2022-09-16T07:28:19.563Z")
  }
]

//SEARCH IN MONGODB COLLECTIONS
CWHBlog> db.comments.find({lang:'Python'})
[
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  }
]

//FIND THE DATA THAT IS HVING LANG:PYTHON
CWHBlog> db.comments.find({lang:'Python'})
[
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  }
]

//IF YOU TRY TO FIND WHICH DOESN'T EXISTS IT WILL SHOW BLANK
CWHBlog> db.comments.find({lang:'Python', 'name':'Harry'})

//IF YOU TRY TO FIND WHICH DOESN'T EXISTS IT WILL SHOW BLANK, MENTION THE
//RIGHT DATA
CWHBlog> db.comments.find({lang:'Python', 'name':'Rohan'})
[
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  }
]

//FIND THE DATA, ALIGN IT PROPERLY USING PRETTY AND FIND ONLY 2 DATA'S, FIRST TWO
CWHBlog> db.comments.find().pretty().limit(2)
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  }
]

//FIND THE DATA, ALIGN IT PROPERLY USING PRETTY AND FIND ONLY FIRST DATA, FIRST ONE
CWHBlog> db.comments.find().pretty().limit(1)
[ { _id: ObjectId("63241e23e63b76ae19f4d533") } ]

//FIND ONLY ONE OUTPUT
CWHBlog> db.comments.find().pretty().limit(1).count()
1

//FIND ONLY TWO OUTPUT
CWHBlog> db.comments.find().pretty().limit(2).count()
2

//FIND TOTAL OUTPUTS
CWHBlog> db.comments.find().count()
6
CWHBlog> db.comments.find().pretty().limit(2).count()
2

//FIND DATA THAT IS HAVING HARRY
CWHBlog> db.comments.find({name: 'Harry'}).count()
3

//FIND DATA THAT IS HAVING ROHAN
CWHBlog> db.comments.find({ name: 'Rohan' }).count()
1

//SORT THAT DATA IN ASCENDING ORDER MENTION 1
CWHBlog> db.comments.find().sort({member_since:1}).pretty()
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242593e63b76ae19f4d538"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5,
    date: ISODate("2022-09-16T07:28:19.563Z")
  }
]

//SORT THAT DATA IN DESCENDING ORDER MENTION -1
CWHBlog> db.comments.find().sort({member_since:-1}).pretty()
[
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242593e63b76ae19f4d538"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5,
    date: ISODate("2022-09-16T07:28:19.563Z")
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  { _id: ObjectId("63241e23e63b76ae19f4d533") }
]

//FIND ONLY ONE DATA THAT HAS HARRY
CWHBlog> db.comments.findOne({name:'Harry'})
{
  _id: ObjectId("63241e5ae63b76ae19f4d534"),
  name: 'Harry',
  lang: 'JS',
  member_since: 5
}

//UPDATE THE DATA, UPDATE MIGHT WORK, FOR THAT USE replaceOne() function
//WHICH WORKS THE SAME
CWHBlog> db.comments.update({name:'Harry'},
...   {
.....     'name':'Harry',
.....     'lang':'JS',
.....     'member_since':51
.....   })
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
MongoInvalidArgumentError: Update document requires atomic operators
CWHBlog> db.comments.find()
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  },
  {
    _id: ObjectId("63242593e63b76ae19f4d538"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5,
    date: ISODate("2022-09-16T07:28:19.563Z")
  }
]

//UPDATEONE() MIGHT NOT ALSO WORK
CWHBlog> db.comments.updateOne({ name: 'Harry' }, { 'name': 'Harry', 'lang': 'JS', 'member_since': 51 })
MongoInvalidArgumentError: Update document requires atomic operators
CWHBlog>  db.comments.updateOne({name:'Harry'},
...   {
.....     'name':'Harry',
.....     'lang':'JS',
.....     'member_since':51
.....   })
MongoInvalidArgumentError: Update document requires atomic operators

//USE REPLACEONE, SYNTAX IS FIND name:Harry AND UPDATE THE DATA, WHAT YOU WANT
// YOU WILL GET
/* {
  acknowledged: true,
  insertedId: null,
  matchedCount: 1, //WHICH SAYS HARRY NAME IS MATCHED
  modifiedCount: 1, // YES YOU HAVE MODIFIED member_since:5 to 51, SO IT SHOWS ONE
  upsertedCount: 0
}*/

//FIND IF THE DATA IS UPDATED
CWHBlog> db.comments.find()
[
  { _id: ObjectId("63241e23e63b76ae19f4d533") },
  {
    _id: ObjectId("63241e5ae63b76ae19f4d534"),
    name: 'Harry',
    lang: 'JS',
    member_since: 51
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d535"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d536"),
    name: 'Rohan',
    lang: 'Python',
    member_since: 3
  },
  {
    _id: ObjectId("63242275e63b76ae19f4d537"),
    name: 'Lovish',
    lang: 'Java',
    member_since: 4
  },
  {
    _id: ObjectId("63242593e63b76ae19f4d538"),
    name: 'Harry',
    lang: 'JS',
    member_since: 5,
    date: ISODate("2022-09-16T07:28:19.563Z")
  }
]

// IF YOU TRY TO UPDATE DATA WHICH DOESN'T EXISTS, ALL WILL SHOW ZERO
CWHBlog> db.comments.replaceOne({name:'Harry22'},
...   {
.....     'name':'Harry',
.....     'lang':'JS',
.....     'member_since':51
.....   })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}

//WHAT IS upsertedCount()?
//IF YOU WANT TO INSERT DATA THAT DOESN'T EXISTS, NEW DATA SHUBHAM NAME
// THEN MENTION {upsert:true} CONDITION TO UPDATE THE DATA
CWHBlog> db.comments.replaceOne({name:'Shubham'},
...   {
.....     'name':'Harry',
.....     'lang':'JS',
.....     'member_since':51
.....   }, {upsert:true})
{
  acknowledged: true,
  insertedId: ObjectId("632464dbcc99825a9fe5b845"),
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 1
}
// name:shubham doesn't update, only inside of it updates,
// doesn't matter name:shubham